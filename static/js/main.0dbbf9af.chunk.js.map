{"version":3,"sources":["Body.js","Email.js","Name.js","Comment.js","Comments.js","App.js","serviceWorker.js","index.js"],"names":["Body","className","this","props","comment","body","onClick","deleteComment","id","React","Component","Email","state","loading","setTimeoutId","setTimeout","setState","clearTimeout","email","Name","name","Comment","Comments","comments","pageNumber","error","number","newComments","filter","newPageNumber","Math","min","lastPageNumber","parseInt","length","fetch","then","response","json","pageStart","pageEnd","pageComments","slice","lastPage","map","key","bind","disabled","changePage","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4NAmBeA,E,iLAhBH,IAAD,OACP,OACE,uBAAGC,UAAU,aACVC,KAAKC,MAAMC,QAAQC,KAEpB,4BACEC,QAAS,kBAAM,EAAKH,MAAMI,cAAc,EAAKJ,MAAMC,QAAQI,KAC3DP,UAAU,uCAEV,uBAAGA,UAAU,2B,GAVJQ,IAAMC,WCwCVC,E,2MArCbC,MAAQ,CACNC,SAAS,EACTC,aAAc,M,mFAGK,IAAD,OACZA,EAAeC,YAAW,WAC9B,EAAKC,SAAS,CAAEH,SAAS,MACxB,KAEHX,KAAKc,SAAS,CAAEF,mB,6CAGM,IACdA,EAAiBZ,KAAKU,MAAtBE,aACJA,GACFG,aAAaH,K,+BAKf,OACE,6BACE,yBAAKb,UAAU,oBAAoBC,KAAKC,MAAMC,QAAQc,OACrDhB,KAAKU,MAAMC,QACV,uBAAGZ,UAAU,wBAEb,kBAAC,EAAD,CACEM,cAAeL,KAAKC,MAAMI,cAC1BH,QAASF,KAAKC,MAAMC,e,GA9BZK,IAAMC,WCsCXS,E,2MArCbP,MAAQ,CACNC,SAAS,EACTC,aAAc,M,mFAGK,IAAD,OACZA,EAAeC,YAAW,WAC9B,EAAKC,SAAS,CAAEH,SAAS,MACxB,KAEHX,KAAKc,SAAS,CAAEF,mB,6CAGM,IACdA,EAAiBZ,KAAKU,MAAtBE,aACJA,GACFG,aAAaH,K,+BAKf,OACE,6BACE,wBAAIb,UAAU,QAAQC,KAAKC,MAAMC,QAAQgB,MACxClB,KAAKU,MAAMC,QACV,uBAAGZ,UAAU,wBAEb,kBAAC,EAAD,CACEM,cAAeL,KAAKC,MAAMI,cAC1BH,QAASF,KAAKC,MAAMC,e,GA9BbK,IAAMC,WCeVW,E,iLAbX,OACE,yBAAKpB,UAAU,aACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,CACEM,cAAeL,KAAKC,MAAMI,cAC1BH,QAASF,KAAKC,MAAMC,gB,GAPVK,IAAMC,WCsGbY,E,2MAnGbV,MAAQ,CACNW,SAAU,GACVV,SAAS,EACTW,WAAY,EACZC,MAAO,M,0EAGEC,GACTxB,KAAKc,SAAS,CAAEQ,WAAYE,M,oCAGhBlB,GAAK,IAAD,EACiBN,KAAKU,MAA9BY,EADQ,EACRA,WAEFG,EAHU,EACIJ,SAESK,QAAO,SAAAxB,GAAO,OAAIA,EAAQI,KAAOA,KACxDqB,EAAgBC,KAAKC,IAAIP,EAAYtB,KAAK8B,eAAeL,IAE/DzB,KAAKc,SAAS,CAAEO,SAAUI,EAAaH,WAAYK,M,qCAGtCN,GACb,OAAOU,UAAUV,EAASW,OAAS,GAxBtB,K,0CA2BM,IAAD,OAClBC,MAAM,kDACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAI,EAAKtB,SAAS,CAAEO,SAAUe,EAAMzB,SAAS,S,+BAGjD,IAAD,SAC0CX,KAAKU,MAA9CC,EADD,EACCA,QAASU,EADV,EACUA,SAAUC,EADpB,EACoBA,WAAYC,EADhC,EACgCA,MAEvC,GAAIZ,EACF,OACE,wBAAIZ,UAAU,oBACZ,uBAAGA,UAAU,8BACb,6BACA,6BAHF,iBASJ,GAAIwB,EACF,OAAO,wBAAIxB,UAAU,oBAAd,uBAGT,GAAwB,IAApBsB,EAASW,OACX,OAAO,wBAAIjC,UAAU,oBAAd,wBAGT,IAAMsC,EAvDO,EAuDKf,EACZgB,EAAUD,EAxDH,EAyDPE,EAAelB,EAASmB,MAAMH,EAAWC,GACzCG,EAAWzC,KAAK8B,eAAeT,GAErC,OACE,yBAAKtB,UAAU,QACb,yBAAKA,UAAU,OACZwC,EAAaG,KAAI,SAAAxC,GAAO,OACvB,yBACEyC,IAAKzC,EAAQI,GACbP,UAAU,mBAEV,kBAAC,EAAD,CACEM,cAAe,EAAKA,cAAcuC,KAAK,GACvC1C,QAASA,SAMjB,yBAAKH,UAAU,eACb,4BACE8C,SAAyB,IAAfvB,EACVlB,QAAS,kBAAM,EAAK0C,WAAWxB,EAAa,IAC5CvB,UAAU,+BAHZ,YAQA,yBAAKA,UAAU,kCACZuB,EAAa,EADhB,MACsBmB,EAAW,GAGjC,4BACEI,SAAUvB,IAAemB,EACzBrC,QAAS,kBAAM,EAAK0C,WAAWxB,EAAa,IAC5CvB,UAAU,+BAHZ,oB,GAvFaQ,IAAMC,WCKduC,MARf,WACE,OACE,yBAAKhD,UAAU,aACb,kBAAC,EAAD,QCMciD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,iB","file":"static/js/main.0dbbf9af.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Body extends React.Component {\n  render() {\n    return (\n      <p className=\"mb-0 mt-3\">\n        {this.props.comment.body}\n\n        <button\n          onClick={() => this.props.deleteComment(this.props.comment.id)}\n          className=\"btn btn-sm btn-outline-danger trash\"\n        >\n          <i className=\"far fa-trash-alt\" />\n        </button>\n      </p>\n    );\n  }\n}\n\nexport default Body;\n","import React from \"react\";\n\nimport Body from \"./Body\";\n\nclass Email extends React.Component {\n  state = {\n    loading: true,\n    setTimeoutId: null\n  };\n\n  componentDidMount() {\n    const setTimeoutId = setTimeout(() => {\n      this.setState({ loading: false });\n    }, 1000);\n\n    this.setState({ setTimeoutId });\n  }\n\n  componentWillUnmount() {\n    const { setTimeoutId } = this.state;\n    if (setTimeoutId) {\n      clearTimeout(setTimeoutId);\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"small text-muted\">{this.props.comment.email}</div>\n        {this.state.loading ? (\n          <i className=\"fas fa-atom fa-spin\" />\n        ) : (\n          <Body\n            deleteComment={this.props.deleteComment}\n            comment={this.props.comment}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Email;\n","import React from \"react\";\n\nimport Email from \"./Email\";\n\nclass Name extends React.Component {\n  state = {\n    loading: true,\n    setTimeoutId: null\n  };\n\n  componentDidMount() {\n    const setTimeoutId = setTimeout(() => {\n      this.setState({ loading: false });\n    }, 1000);\n\n    this.setState({ setTimeoutId });\n  }\n\n  componentWillUnmount() {\n    const { setTimeoutId } = this.state;\n    if (setTimeoutId) {\n      clearTimeout(setTimeoutId);\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <h5 className=\"mr-5\">{this.props.comment.name}</h5>\n        {this.state.loading ? (\n          <i className=\"fas fa-atom fa-spin\" />\n        ) : (\n          <Email\n            deleteComment={this.props.deleteComment}\n            comment={this.props.comment}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Name;\n","import React from \"react\";\n\nimport Name from \"./Name\";\n\nclass Comment extends React.Component {\n  render() {\n    return (\n      <div className=\"card mb-3\">\n        <div className=\"card-body\">\n          <Name\n            deleteComment={this.props.deleteComment}\n            comment={this.props.comment}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Comment;\n","import React from \"react\";\n\nimport Comment from \"./Comment\";\n\nconst pageSize = 4;\n\nclass Comments extends React.Component {\n  state = {\n    comments: [],\n    loading: true,\n    pageNumber: 0,\n    error: null,\n  };\n\n  changePage(number) {\n    this.setState({ pageNumber: number });\n  }\n\n  deleteComment(id) {\n    const { pageNumber, comments } = this.state;\n\n    const newComments = comments.filter(comment => comment.id !== id);\n    const newPageNumber = Math.min(pageNumber, this.lastPageNumber(newComments));\n\n    this.setState({ comments: newComments, pageNumber: newPageNumber });\n  }\n\n  lastPageNumber(comments) {\n    return parseInt((comments.length - 1) / pageSize);\n  }\n\n  componentDidMount() {\n    fetch(\"https://react-workshop-zygo-api.herokuapp.com/\")\n      .then(response => response.json())\n      .then(json => this.setState({ comments: json, loading: false }))\n  }\n\n  render() {\n    const { loading, comments, pageNumber, error } = this.state;\n\n    if (loading) {\n      return (\n        <h3 className=\"text-center my-5\">\n          <i className=\"fas fa-atom fa-spin fa-4x\" />\n          <br />\n          <br />\n          Carregando...\n        </h3>\n      );\n    }\n\n    if (error) {\n      return <h3 className=\"text-center my-5\">Erro ao carregar :(</h3>;\n    }\n\n    if (comments.length === 0) {\n      return <h3 className=\"text-center my-5\">Nenhum comentário</h3>;\n    }\n\n    const pageStart = pageNumber * pageSize;\n    const pageEnd = pageStart + pageSize;\n    const pageComments = comments.slice(pageStart, pageEnd);\n    const lastPage = this.lastPageNumber(comments);\n\n    return (\n      <div className=\"my-5\">\n        <div className=\"row\">\n          {pageComments.map(comment => (\n            <div\n              key={comment.id}\n              className=\"col-12 col-lg-6\"\n            >\n              <Comment\n                deleteComment={this.deleteComment.bind(this)}\n                comment={comment}\n              />\n            </div>\n          ))}\n        </div>\n\n        <div className=\"text-center\">\n          <button\n            disabled={pageNumber === 0}\n            onClick={() => this.changePage(pageNumber - 1)}\n            className=\"btn btn-sm mx-2 btn-primary\"\n          >\n            Anterior\n          </button>\n\n          <div className=\"btn btn-sm btn-outline-primary\">\n            {pageNumber + 1} / {lastPage + 1}\n          </div>\n\n          <button\n            disabled={pageNumber === lastPage}\n            onClick={() => this.changePage(pageNumber + 1)}\n            className=\"btn btn-sm btn-primary mx-2\"\n          >\n            Próximo\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Comments;\n","import React from \"react\";\nimport Comments from \"./Comments\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Comments />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"@fortawesome/fontawesome-free/css/all.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}